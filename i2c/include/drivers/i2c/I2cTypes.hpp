#ifndef DRIVERS_I2C_INCLUDE_DRIVERS_I2C_I2CTYPES_HPP
#define DRIVERS_I2C_INCLUDE_DRIVERS_I2C_I2CTYPES_HPP

#include <callbacks/Callback.hpp>

namespace Drivers {

  ///@brief enumerate available I2C peripherals
  enum class I2CPort : uint8_t {
      I2C1 [[maybe_unused]]= 0U,
      I2C2 [[maybe_unused]] = 1U
  };

  /// @brief Supported I2C operational modes. Currently only support the standard and fast speeds.
  enum class I2CSpeed : uint8_t {
    Std [[maybe_unused]] = 1U,
    Fast [[maybe_unused]] = 2U
  };

  /// @brief direction to data transfer for peripheral operation
  enum class I2CDirection : uint8_t {
      Write = 0U,
    Read = 1U
  };

  /// @brief whether a stop is generated at the end of the current transmission
  enum class I2CAutoEnd {
    NoStop [[maybe_unused]] = 0U,
    Stop [[maybe_unused]] = 1U
  };


  /// @brief the Current available i2C events that can be generated by the peripheral. Maps to register offsets in the
  /// event register for the basic peripheral
  enum class I2CEvent : uint8_t {
      Start = 0U,
      Address = 1U,
      Btf [[maybe_unused]] = 2U,
      RxNe = 6U,
      TxE = 7U,
      Stop [[maybe_unused]] = 9U,
      Error = 16U,
      DmaComplete = 17U
  };

  ///@brief  The current state of the current operation being performed by the driver.
  enum class I2CDriverState
      : uint8_t {
      NoOperation,
      SendStart [[maybe_unused]],
      SendDeviceAddress,
      SendRegisterAddress,
      RxData,
      TxData,
  };

  /// @brief whether the driver is using DMA or interrupts
   enum class I2CTxRxType : uint8_t {
      RxTxDma [[maybe_unused]] =0,
      RxTxInt [[maybe_unused]] = 1
   };

  using NotifyI2cEventCb = Mem::Callback<8, void(I2CEvent)>;

  /// @brief The reason for the failure of the currently active command.
  enum class  I2cTransferStatus: uint8_t{
    Okay=1,
    BusError=2,
    };

  /// @brief The command that was completed
  enum class  I2cCommand : uint8_t{
    Read,
    Write,
    Error,
    Unknown
  };
  /// Brief THe callback interface for the driver.
  using NotifyI2cDriverTransferComplete = Mem::Callback<8, void(I2cCommand, I2cTransferStatus)>;
}

#endif
